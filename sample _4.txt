When multiple threads can make calls to the properties and methods of a single object, it is critical that those 
calls be synchronized. Otherwise one thread might interrupt what another thread is doing, and the object could be 
left in an invalid state. A class whose members are protected from such interruptions is called thread-safe.
.NET provides several strategies to synchronize access to instance and static members: Synchronized code regions. 
You can use the Monitor class or compiler support for this class to synchronize only the code block that needs it, 
improving performance. Manual synchronization. You can use the synchronization objects provided by the .NET class 
library. See Overview of Synchronization Primitives, which includes a discussion of the Monitor class.
Synchronized contexts. For .NET Framework and Xamarin applications only, you can use the SynchronizationAttribute 
to enable simple, automatic synchronization for ContextBoundObject objects. Collection classes in the System. 
Collections.Concurrent namespace. These classes provide built-in synchronized add and remove operations. For more 
information, see Thread-Safe Collections. The common language runtime provides a thread model in which classes 
fall into a number of categories that can be synchronized in a variety of different ways depending on the 
requirements. The following table shows what synchronization support is provided for fields and methods with a 
given synchronization category.