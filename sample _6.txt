Management of all threads is done through the Thread class, including threads created by the common language 
runtime and those created outside the runtime that enter the managed environment to execute code. The runtime 
monitors all the threads in its process that have ever executed code within the managed execution environment. 
It does not track any other threads. Threads can enter the managed execution environment through COM interop 
(because the runtime exposes managed objects as COM objects to the unmanaged world), the COM DllGetClassObject 
function, and platform invoke. When an unmanaged thread enters the runtime through, for example, a COM callable 
wrapper, the system checks the thread-local store of that thread to look for an internal managed Thread object. 
If one is found, the runtime is already aware of this thread. If it cannot find one, however, the runtime builds 
a new Thread object and installs it in the thread-local store of that thread. In managed threading, 
Thread.GetHashCode is the stable managed thread identification. For the lifetime of your thread, 
it will not collide with the value from any other thread, regardless of the application domain from which you 
obtain this value.