A managed thread can be marked to indicate that it will host a single-threaded or multithreaded apartment. 
(For more information on the COM threading architecture, see Processes, Threads, and Apartments.) 
The GetApartmentState, SetApartmentState, and TrySetApartmentState methods of the Thread class return and assign 
the apartment state of a thread. If the state has not been set, GetApartmentState returns ApartmentState.Unknown.
The property can be set only when the thread is in the ThreadState.Unstarted state; it can be set only once for a 
thread. If the apartment state is not set before the thread is started, the thread is initialized as a multithreaded 
apartment (MTA). The finalizer thread and all threads controlled by ThreadPool are MTA. Important.
For application startup code, the only way to control apartment state is to apply the MTAThreadAttribute or the 
STAThreadAttribute to the entry point procedure. Managed objects that are exposed to COM behave as if they had 
aggregated the free-threaded marshaler. In other words, they can be called from any COM apartment in a free-threaded 
manner. The only managed objects that do not exhibit this free-threaded behavior are those objects that derive from 
ServicedComponent or StandardOleMarshalObject. In the managed world, there is no support for the 
SynchronizationAttribute unless you use contexts and context-bound managed instances. If you are using Enterprise 
Services, then your object must derive from ServicedComponent (which is itself derived from ContextBoundObject).
When managed code calls out to COM objects, it always follows COM rules. In other words, it calls through COM 
apartment proxies and COM+ 1.0 context wrappers as dictated by OLE32.